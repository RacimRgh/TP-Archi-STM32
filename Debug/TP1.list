
TP1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000128  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002ec  080002ec  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002ec  080002ec  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  080002ec  080002ec  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  080002ec  080002ec  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080002ec  080002ec  000102ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080002f0  080002f0  000102f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  080002f4  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000008  080002fc  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080002fc  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_line   000000e6  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   00000048  00000000  00000000  0002011e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00000026  00000000  00000000  00020166  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000048  00000000  00000000  00020190  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00000082  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000020  00000000  00000000  00020260  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_frame  0000002c  00000000  00000000  00020280  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000008 	.word	0x20000008
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080002d4 	.word	0x080002d4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	080002d4 	.word	0x080002d4

08000204 <main>:
.text
.global main
.type main, %function

main:
		LDR R0,=N /*taille*/
 8000204:	480a      	ldr	r0, [pc, #40]	; (8000230 <stop+0x6>)
		LDRB R0, [R0]
 8000206:	7800      	ldrb	r0, [r0, #0]
		LDR R1,=tab
 8000208:	490a      	ldr	r1, [pc, #40]	; (8000234 <stop+0xa>)
		/* Compteur */
		MOV R2, #0
 800020a:	2200      	movs	r2, #0
		SUB R0,R0,#1
 800020c:	3801      	subs	r0, #1

0800020e <loop>:
loop:
		/*Si compteur = taille -11 alors fin du programme
		et ce pour ne pas vérifier la dernière valeur et celle d'après qui ne fait pas partie du tableau*/
		CMP R2,R0
 800020e:	4282      	cmp	r2, r0
		BEQ stop
 8000210:	d00b      	beq.n	800022a <stop>
		/* Comparer tab[compteur] et tab[compteur+1]*/
		LDRB R3,[R1,R2]
 8000212:	5c8b      	ldrb	r3, [r1, r2]
		ADD R2,R2,#1
 8000214:	3201      	adds	r2, #1
		LDRB R4,[R1,R2]
 8000216:	5c8c      	ldrb	r4, [r1, r2]
		CMP R3,R4
 8000218:	42a3      	cmp	r3, r4
		/* Si inferieur alors continuer, sinon permuter*/
		BLT loop
 800021a:	dbf8      	blt.n	800020e <loop>
		/* Permutation */
		STRB R3,[R1,R2]
 800021c:	548b      	strb	r3, [r1, r2]
		SUB R2,R2,#1
 800021e:	3a01      	subs	r2, #1
		STRB R4,[R1,R2]
 8000220:	548c      	strb	r4, [r1, r2]
		/* Si on est pas à l'indice 0, revenir en arrière pour traiter la valeur précédente dans le nouveau tableau, sinon continuer */
		CMP R2,#0
 8000222:	2a00      	cmp	r2, #0
		BEQ loop
 8000224:	d0f3      	beq.n	800020e <loop>
		SUB R2,R2,#1
 8000226:	3a01      	subs	r2, #1
		B loop
 8000228:	e7f1      	b.n	800020e <loop>

0800022a <stop>:

stop:   B stop
 800022a:	e7fe      	b.n	800022a <stop>
		BX LR
 800022c:	4770      	bx	lr
 800022e:	0000      	.short	0x0000
		LDR R0,=N /*taille*/
 8000230:	20000000 	.word	0x20000000
		LDR R1,=tab
 8000234:	20000001 	.word	0x20000001

08000238 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000238:	480d      	ldr	r0, [pc, #52]	; (8000270 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800023a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800023c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000240:	480c      	ldr	r0, [pc, #48]	; (8000274 <LoopForever+0x6>)
  ldr r1, =_edata
 8000242:	490d      	ldr	r1, [pc, #52]	; (8000278 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000244:	4a0d      	ldr	r2, [pc, #52]	; (800027c <LoopForever+0xe>)
  movs r3, #0
 8000246:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000248:	e002      	b.n	8000250 <LoopCopyDataInit>

0800024a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800024a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800024c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800024e:	3304      	adds	r3, #4

08000250 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000250:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000252:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000254:	d3f9      	bcc.n	800024a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000256:	4a0a      	ldr	r2, [pc, #40]	; (8000280 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000258:	4c0a      	ldr	r4, [pc, #40]	; (8000284 <LoopForever+0x16>)
  movs r3, #0
 800025a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800025c:	e001      	b.n	8000262 <LoopFillZerobss>

0800025e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800025e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000260:	3204      	adds	r2, #4

08000262 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000262:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000264:	d3fb      	bcc.n	800025e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000266:	f000 f811 	bl	800028c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800026a:	f7ff ffcb 	bl	8000204 <main>

0800026e <LoopForever>:

LoopForever:
    b LoopForever
 800026e:	e7fe      	b.n	800026e <LoopForever>
  ldr   r0, =_estack
 8000270:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000274:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000278:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 800027c:	080002f4 	.word	0x080002f4
  ldr r2, =_sbss
 8000280:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8000284:	20000024 	.word	0x20000024

08000288 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000288:	e7fe      	b.n	8000288 <ADC_IRQHandler>
	...

0800028c <__libc_init_array>:
 800028c:	b570      	push	{r4, r5, r6, lr}
 800028e:	4e0d      	ldr	r6, [pc, #52]	; (80002c4 <__libc_init_array+0x38>)
 8000290:	4c0d      	ldr	r4, [pc, #52]	; (80002c8 <__libc_init_array+0x3c>)
 8000292:	1ba4      	subs	r4, r4, r6
 8000294:	10a4      	asrs	r4, r4, #2
 8000296:	2500      	movs	r5, #0
 8000298:	42a5      	cmp	r5, r4
 800029a:	d109      	bne.n	80002b0 <__libc_init_array+0x24>
 800029c:	4e0b      	ldr	r6, [pc, #44]	; (80002cc <__libc_init_array+0x40>)
 800029e:	4c0c      	ldr	r4, [pc, #48]	; (80002d0 <__libc_init_array+0x44>)
 80002a0:	f000 f818 	bl	80002d4 <_init>
 80002a4:	1ba4      	subs	r4, r4, r6
 80002a6:	10a4      	asrs	r4, r4, #2
 80002a8:	2500      	movs	r5, #0
 80002aa:	42a5      	cmp	r5, r4
 80002ac:	d105      	bne.n	80002ba <__libc_init_array+0x2e>
 80002ae:	bd70      	pop	{r4, r5, r6, pc}
 80002b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80002b4:	4798      	blx	r3
 80002b6:	3501      	adds	r5, #1
 80002b8:	e7ee      	b.n	8000298 <__libc_init_array+0xc>
 80002ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80002be:	4798      	blx	r3
 80002c0:	3501      	adds	r5, #1
 80002c2:	e7f2      	b.n	80002aa <__libc_init_array+0x1e>
 80002c4:	080002ec 	.word	0x080002ec
 80002c8:	080002ec 	.word	0x080002ec
 80002cc:	080002ec 	.word	0x080002ec
 80002d0:	080002f0 	.word	0x080002f0

080002d4 <_init>:
 80002d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002d6:	bf00      	nop
 80002d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002da:	bc08      	pop	{r3}
 80002dc:	469e      	mov	lr, r3
 80002de:	4770      	bx	lr

080002e0 <_fini>:
 80002e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002e2:	bf00      	nop
 80002e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002e6:	bc08      	pop	{r3}
 80002e8:	469e      	mov	lr, r3
 80002ea:	4770      	bx	lr
