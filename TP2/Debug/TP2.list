
TP2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000174  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000338  08000338  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000338  08000338  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08000338  08000338  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000338  08000338  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000338  08000338  00010338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800033c  0800033c  0001033c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08000340  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000024  08000364  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000048  08000364  00020048  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000990  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000001eb  00000000  00000000  000209e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000058  00000000  00000000  00020bd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000040  00000000  00000000  00020c28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001a59  00000000  00000000  00020c68  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000065e  00000000  00000000  000226c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00007668  00000000  00000000  00022d1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0002a387  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000ac  00000000  00000000  0002a404  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000024 	.word	0x20000024
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000320 	.word	0x08000320

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000028 	.word	0x20000028
 8000200:	08000320 	.word	0x08000320

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <main>:
char string1[]= "Vive CY CErgy Paris Universiteeee!";
int count_e(char* tab);
int count_e_asm(char* tab);
int nb_e_c =0, taille;

int main (void){
 8000214:	b580      	push	{r7, lr}
 8000216:	b082      	sub	sp, #8
 8000218:	af00      	add	r7, sp, #0
	taille = strlen(string1);
 800021a:	4806      	ldr	r0, [pc, #24]	; (8000234 <main+0x20>)
 800021c:	f7ff fff2 	bl	8000204 <strlen>
 8000220:	4603      	mov	r3, r0
 8000222:	461a      	mov	r2, r3
 8000224:	4b04      	ldr	r3, [pc, #16]	; (8000238 <main+0x24>)
 8000226:	601a      	str	r2, [r3, #0]
	//Init Tab Content randomly
//	nb_e_c = count_e(string1);
	int success = count_e_asm(string1);
 8000228:	4802      	ldr	r0, [pc, #8]	; (8000234 <main+0x20>)
 800022a:	f000 f807 	bl	800023c <count_e_asm>
 800022e:	6078      	str	r0, [r7, #4]
	//Infinite loop
	while(1){
 8000230:	e7fe      	b.n	8000230 <main+0x1c>
 8000232:	bf00      	nop
 8000234:	20000000 	.word	0x20000000
 8000238:	20000044 	.word	0x20000044

0800023c <count_e_asm>:
	}
	asm("LDR r0,=nb_e_c");
	asm("LDR r0,[r0]");
}

int count_e_asm(char* tab){
 800023c:	b480      	push	{r7}
 800023e:	b083      	sub	sp, #12
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
	// Compteur de 'e'
	asm("LDR r3,=nb_e_c\n\t"
 8000244:	4b0c      	ldr	r3, [pc, #48]	; (8000278 <check_cpt+0x1c>)
 8000246:	681b      	ldr	r3, [r3, #0]
		"LDR r3, [r3]\n\t"
	);
	// Taille de la chaine
	asm("LDR r4,=taille\n\t"
 8000248:	4c0c      	ldr	r4, [pc, #48]	; (800027c <check_cpt+0x20>)
 800024a:	6824      	ldr	r4, [r4, #0]
		"LDR r4, [r4]\n\t"
		);
	// Adresse du tableau et compteur de parcours
	asm("LDR r0, =string1\n\t"
 800024c:	480c      	ldr	r0, [pc, #48]	; (8000280 <check_cpt+0x24>)
 800024e:	f04f 0200 	mov.w	r2, #0

08000252 <loop>:
		"MOV r2, #0\n\t");
	// Boucle de parcours et vérification si caractère == 'e' == 101 (ascii)
	asm(
 8000252:	5c81      	ldrb	r1, [r0, r2]
 8000254:	2965      	cmp	r1, #101	; 0x65
 8000256:	d101      	bne.n	800025c <check_cpt>
 8000258:	f103 0301 	add.w	r3, r3, #1

0800025c <check_cpt>:
 800025c:	f102 0201 	add.w	r2, r2, #1
 8000260:	42a2      	cmp	r2, r4
 8000262:	d1f6      	bne.n	8000252 <loop>
		// Vérification si fin de chaine
		"ADD r2,r2,#1\n\t"
		"CMP r2,r4\n\t"
		"BNE loop\n\t"
	);
	asm("LDR r5, =nb_e_c\n\t"
 8000264:	4d04      	ldr	r5, [pc, #16]	; (8000278 <check_cpt+0x1c>)
 8000266:	602b      	str	r3, [r5, #0]
		"STR r3, [r5]\n\t"
	);
	
 			 
	return 0;
 8000268:	2300      	movs	r3, #0
}
 800026a:	4618      	mov	r0, r3
 800026c:	370c      	adds	r7, #12
 800026e:	46bd      	mov	sp, r7
 8000270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000274:	4770      	bx	lr
 8000276:	0000      	.short	0x0000
 8000278:	20000040 	.word	0x20000040
 800027c:	20000044 	.word	0x20000044
 8000280:	20000000 	.word	0x20000000

08000284 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000284:	480d      	ldr	r0, [pc, #52]	; (80002bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000286:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000288:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800028c:	480c      	ldr	r0, [pc, #48]	; (80002c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800028e:	490d      	ldr	r1, [pc, #52]	; (80002c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000290:	4a0d      	ldr	r2, [pc, #52]	; (80002c8 <LoopForever+0xe>)
  movs r3, #0
 8000292:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000294:	e002      	b.n	800029c <LoopCopyDataInit>

08000296 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000296:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000298:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800029a:	3304      	adds	r3, #4

0800029c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800029c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800029e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002a0:	d3f9      	bcc.n	8000296 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002a2:	4a0a      	ldr	r2, [pc, #40]	; (80002cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80002a4:	4c0a      	ldr	r4, [pc, #40]	; (80002d0 <LoopForever+0x16>)
  movs r3, #0
 80002a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002a8:	e001      	b.n	80002ae <LoopFillZerobss>

080002aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002ac:	3204      	adds	r2, #4

080002ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002b0:	d3fb      	bcc.n	80002aa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002b2:	f000 f811 	bl	80002d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002b6:	f7ff ffad 	bl	8000214 <main>

080002ba <LoopForever>:

LoopForever:
    b LoopForever
 80002ba:	e7fe      	b.n	80002ba <LoopForever>
  ldr   r0, =_estack
 80002bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002c4:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 80002c8:	08000340 	.word	0x08000340
  ldr r2, =_sbss
 80002cc:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 80002d0:	20000048 	.word	0x20000048

080002d4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002d4:	e7fe      	b.n	80002d4 <ADC_IRQHandler>
	...

080002d8 <__libc_init_array>:
 80002d8:	b570      	push	{r4, r5, r6, lr}
 80002da:	4e0d      	ldr	r6, [pc, #52]	; (8000310 <__libc_init_array+0x38>)
 80002dc:	4c0d      	ldr	r4, [pc, #52]	; (8000314 <__libc_init_array+0x3c>)
 80002de:	1ba4      	subs	r4, r4, r6
 80002e0:	10a4      	asrs	r4, r4, #2
 80002e2:	2500      	movs	r5, #0
 80002e4:	42a5      	cmp	r5, r4
 80002e6:	d109      	bne.n	80002fc <__libc_init_array+0x24>
 80002e8:	4e0b      	ldr	r6, [pc, #44]	; (8000318 <__libc_init_array+0x40>)
 80002ea:	4c0c      	ldr	r4, [pc, #48]	; (800031c <__libc_init_array+0x44>)
 80002ec:	f000 f818 	bl	8000320 <_init>
 80002f0:	1ba4      	subs	r4, r4, r6
 80002f2:	10a4      	asrs	r4, r4, #2
 80002f4:	2500      	movs	r5, #0
 80002f6:	42a5      	cmp	r5, r4
 80002f8:	d105      	bne.n	8000306 <__libc_init_array+0x2e>
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000300:	4798      	blx	r3
 8000302:	3501      	adds	r5, #1
 8000304:	e7ee      	b.n	80002e4 <__libc_init_array+0xc>
 8000306:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800030a:	4798      	blx	r3
 800030c:	3501      	adds	r5, #1
 800030e:	e7f2      	b.n	80002f6 <__libc_init_array+0x1e>
 8000310:	08000338 	.word	0x08000338
 8000314:	08000338 	.word	0x08000338
 8000318:	08000338 	.word	0x08000338
 800031c:	0800033c 	.word	0x0800033c

08000320 <_init>:
 8000320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000322:	bf00      	nop
 8000324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000326:	bc08      	pop	{r3}
 8000328:	469e      	mov	lr, r3
 800032a:	4770      	bx	lr

0800032c <_fini>:
 800032c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800032e:	bf00      	nop
 8000330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000332:	bc08      	pop	{r3}
 8000334:	469e      	mov	lr, r3
 8000336:	4770      	bx	lr
