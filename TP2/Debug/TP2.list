
TP2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000154  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000318  08000318  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000318  08000318  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000318  08000318  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000318  08000318  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000318  08000318  00010318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800031c  0800031c  0001031c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000320  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000048  20000004  08000324  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000004c  08000324  0002004c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000971  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000203  00000000  00000000  000209a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000058  00000000  00000000  00020ba8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000040  00000000  00000000  00020c00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000019f9  00000000  00000000  00020c40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000063f  00000000  00000000  00022639  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000075e8  00000000  00000000  00022c78  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0002a260  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000a0  00000000  00000000  0002a2dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000300 	.word	0x08000300

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	08000300 	.word	0x08000300

08000204 <main>:
int fibo_suite[TAB_SIZE]={0};
void fibo_asm();
int x=0, y=1;


int main (void){
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
	
	// Perform call to fibo function 
	//int res = fibo(0,1);
	fibo_asm(x,y);
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <main+0x18>)
 800020a:	681a      	ldr	r2, [r3, #0]
 800020c:	4b04      	ldr	r3, [pc, #16]	; (8000220 <main+0x1c>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	4619      	mov	r1, r3
 8000212:	4610      	mov	r0, r2
 8000214:	f000 f806 	bl	8000224 <fibo_asm>
	
	//Infinite loop
	while(1){
 8000218:	e7fe      	b.n	8000218 <main+0x14>
 800021a:	bf00      	nop
 800021c:	20000048 	.word	0x20000048
 8000220:	20000000 	.word	0x20000000

08000224 <fibo_asm>:
		fibo_suite[i] = y;
	}
	return y;
}

void fibo_asm(){
 8000224:	b480      	push	{r7}
 8000226:	af00      	add	r7, sp, #0
//	    "MRSEQ R0, MSP_NS\n\t"
//	    "MRSNE R0, PSP_NS\n\t"
//	    "B hard_fault_handler_c\n\t"
//	  );
	//Adresse du tableau
	asm("LDR r0, =fibo_suite");
 8000228:	480b      	ldr	r0, [pc, #44]	; (8000258 <loop+0x1e>)
	// Récupération de x et y et initialisation du compteur (debut:2*4 octets)
	asm("MOV r1,#8\n\t"
 800022a:	f04f 0108 	mov.w	r1, #8
 800022e:	4a0b      	ldr	r2, [pc, #44]	; (800025c <loop+0x22>)
 8000230:	4b0b      	ldr	r3, [pc, #44]	; (8000260 <loop+0x26>)
 8000232:	6812      	ldr	r2, [r2, #0]
 8000234:	681b      	ldr	r3, [r3, #0]
		"LDR r3, =y\n\t"
		"LDR r2, [r2]\n\t"
		"LDR r3, [r3]\n\t"
	);
	// Stocakge des 2 premières valeurs du tableau
	asm("STR r2,[r0]\n\t"
 8000236:	6002      	str	r2, [r0, #0]
 8000238:	6043      	str	r3, [r0, #4]

0800023a <loop>:
		"STR r3,[r0,#4]\n\t");
	// Effectuer la somme de fibonacci
	asm("loop:\n\t"
 800023a:	eb03 0402 	add.w	r4, r3, r2
 800023e:	461a      	mov	r2, r3
 8000240:	4623      	mov	r3, r4
 8000242:	5044      	str	r4, [r0, r1]
 8000244:	f101 0104 	add.w	r1, r1, #4
 8000248:	2928      	cmp	r1, #40	; 0x28
 800024a:	d1f6      	bne.n	800023a <loop>
//			"LDR r8, =x\n\t"
//			"LDR r9, =y\n\t"
//			"LDR r10, [r8]\n\t"
//			"LDR r11, [r9]\n\t"
//	);
}
 800024c:	bf00      	nop
 800024e:	46bd      	mov	sp, r7
 8000250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000254:	4770      	bx	lr
 8000256:	0000      	.short	0x0000
 8000258:	20000020 	.word	0x20000020
 800025c:	20000048 	.word	0x20000048
 8000260:	20000000 	.word	0x20000000

08000264 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000264:	480d      	ldr	r0, [pc, #52]	; (800029c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000266:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000268:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800026c:	480c      	ldr	r0, [pc, #48]	; (80002a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800026e:	490d      	ldr	r1, [pc, #52]	; (80002a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000270:	4a0d      	ldr	r2, [pc, #52]	; (80002a8 <LoopForever+0xe>)
  movs r3, #0
 8000272:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000274:	e002      	b.n	800027c <LoopCopyDataInit>

08000276 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000276:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000278:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800027a:	3304      	adds	r3, #4

0800027c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800027c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800027e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000280:	d3f9      	bcc.n	8000276 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000282:	4a0a      	ldr	r2, [pc, #40]	; (80002ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000284:	4c0a      	ldr	r4, [pc, #40]	; (80002b0 <LoopForever+0x16>)
  movs r3, #0
 8000286:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000288:	e001      	b.n	800028e <LoopFillZerobss>

0800028a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800028a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800028c:	3204      	adds	r2, #4

0800028e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800028e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000290:	d3fb      	bcc.n	800028a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000292:	f000 f811 	bl	80002b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000296:	f7ff ffb5 	bl	8000204 <main>

0800029a <LoopForever>:

LoopForever:
    b LoopForever
 800029a:	e7fe      	b.n	800029a <LoopForever>
  ldr   r0, =_estack
 800029c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002a4:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80002a8:	08000320 	.word	0x08000320
  ldr r2, =_sbss
 80002ac:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80002b0:	2000004c 	.word	0x2000004c

080002b4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002b4:	e7fe      	b.n	80002b4 <ADC_IRQHandler>
	...

080002b8 <__libc_init_array>:
 80002b8:	b570      	push	{r4, r5, r6, lr}
 80002ba:	4e0d      	ldr	r6, [pc, #52]	; (80002f0 <__libc_init_array+0x38>)
 80002bc:	4c0d      	ldr	r4, [pc, #52]	; (80002f4 <__libc_init_array+0x3c>)
 80002be:	1ba4      	subs	r4, r4, r6
 80002c0:	10a4      	asrs	r4, r4, #2
 80002c2:	2500      	movs	r5, #0
 80002c4:	42a5      	cmp	r5, r4
 80002c6:	d109      	bne.n	80002dc <__libc_init_array+0x24>
 80002c8:	4e0b      	ldr	r6, [pc, #44]	; (80002f8 <__libc_init_array+0x40>)
 80002ca:	4c0c      	ldr	r4, [pc, #48]	; (80002fc <__libc_init_array+0x44>)
 80002cc:	f000 f818 	bl	8000300 <_init>
 80002d0:	1ba4      	subs	r4, r4, r6
 80002d2:	10a4      	asrs	r4, r4, #2
 80002d4:	2500      	movs	r5, #0
 80002d6:	42a5      	cmp	r5, r4
 80002d8:	d105      	bne.n	80002e6 <__libc_init_array+0x2e>
 80002da:	bd70      	pop	{r4, r5, r6, pc}
 80002dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80002e0:	4798      	blx	r3
 80002e2:	3501      	adds	r5, #1
 80002e4:	e7ee      	b.n	80002c4 <__libc_init_array+0xc>
 80002e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80002ea:	4798      	blx	r3
 80002ec:	3501      	adds	r5, #1
 80002ee:	e7f2      	b.n	80002d6 <__libc_init_array+0x1e>
 80002f0:	08000318 	.word	0x08000318
 80002f4:	08000318 	.word	0x08000318
 80002f8:	08000318 	.word	0x08000318
 80002fc:	0800031c 	.word	0x0800031c

08000300 <_init>:
 8000300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000302:	bf00      	nop
 8000304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000306:	bc08      	pop	{r3}
 8000308:	469e      	mov	lr, r3
 800030a:	4770      	bx	lr

0800030c <_fini>:
 800030c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800030e:	bf00      	nop
 8000310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000312:	bc08      	pop	{r3}
 8000314:	469e      	mov	lr, r3
 8000316:	4770      	bx	lr
